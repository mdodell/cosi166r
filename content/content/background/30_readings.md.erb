---
title: Interesting readings
---

## Ruby Intro
* [Mastering Bash and Terminal](https://www.blockloop.io/mastering-bash-and-terminal?utm_source=hackernewsletter&utm_medium=email&utm_term=fav)
* [Learn Enough Command Line to be Dangerous](https://www.learnenough.com/command-line-tutorial) seems to be a very nice resource.

## Stories to UI
* Resources: [Paper Prototyping Helper Kit](http://www.userfocus.co.uk/resources/prototype.html)
* [Effective Examples of Paper Prototyping](https://speckyboy.com/10-effective-video-examples-of-paper-prototyping/)
* See lots of examples of [paper prototyping here](http://www.google.com/search?q=paper+prototyping&hl=en&safe=off&client=safari&rls=en&prmd=imvnsb&tbm=isch&tbo=u&source=univ&sa=X&ei=slDNT5TgBIW16AHc293MAg&ved=0CGYQsAQ&biw=1251&bih=840)
* Another interesting article: [Test Paper Prototypes to Save Time and Money: The Mozilla Case Study](http://www.nngroup.com/articles/mozilla-paper-prototype/?utm_source=Alertbox&utm_campaign=76128ff738-Paper_Ptype_Touch_Screen_Readers_1045_08_31_2015&utm_medium=email&utm_term=0_7f29a2b335-76128ff738-40070533)

## UI, UX, and Design

* [Effective Use of white space in forms](http://www.nngroup.com/articles/form-design-white-space).
* [Top 5 UX Mistakes](http://www.toptal.com/designers/ux/top-5-common-ux-mistakes)
* [How a UI problem caused a maritime accident](https://arstechnica.co.uk/information-technology/2017/11/uss-mccain-collision-ultimately-caused-by-ui-confusion/)

## Rails Controllers
* [URLs are UI](https://www.hanselman.com/blog/URLsAreUI.aspx?utm_source=hackernewsletter&utm_medium=email&utm_term=fav)
* [Rails Routing Guide](http://guides.rubyonrails.org/routing.html)
* [RESTful Web Services: The Basics](http://www.ibm.com/developerworks/webservices/library/ws-restful/)
* [Singular or Plural CheatSheet in Rails](https://dev.to/scrabill/singular-or-plural-a-cheatsheet-for-ruby-on-rails-generators-4cb8)


## CSS in the wild
* [Writing Clean Code: Start to Bootstrap](https://www.toptal.com/front-end/frontend-clean-code-guide)
* [Learn enough CSS to be dangerous](https://www.learnenough.com/css-and-layout-tutorial/css)
* [Learn enough HTML to be dangerous](https://www.learnenough.com/html-tutorial)

## Forms and Views
* [Rails 5.1 form_with vs. form_tag vs. form_for](https://m.patrikonrails.com/rails-5-1s-form-with-vs-old-form-helpers-3a5f72a8c78a)
* [Nested Forms Demo](https://www.youtube.com/watch?v=0kHBIttrxVg)

## Deeper into Forms and Views
* [Modern Javacript CheatSheet](https://github.com/mbeaudru/modern-js-cheatsheet)
* [Javascript Coding Conventions](http://javascript.crockford.com/code.html)
* [Service Objects Explained](https://medium.freecodecamp.org/service-objects-explained-simply-for-ruby-on-rails-5-a8cc42a5441f)
* [Routes In Ruby on Rails](https://medium.freecodecamp.org/routes-in-ruby-on-rails-5-using-resources-and-records-to-define-urls-411a68afa21a)
* [Example Code with one form based on two models](https://github.com/pitosalas/rails52_basic_form_demo)

## Ajax in Rails
* [Unobtrusive JavaScript via Ajax in Rails](https://blog.codeship.com/unobtrusive-javascript-via-ajax-rails/)
* [How to Show and Hide Elements with Vanilla Javascript](https://gomakethings.com/how-to-show-and-hide-elements-with-vanilla-javascript/)
* [8 Simple CSS3 Transitions that will Wow Your Users](https://www.webdesignerdepot.com/2014/05/8-simple-css3-transitions-that-will-wow-your-users/)
* [Incorporating Modern JavaScript Build Tools with
 Rails](https://jes.al/2017/03/incorporating-modern-javascript-build-tools-with-rails/)

## Test Driven Development
* You may know that I am a space travel geek, especially about the early exploration in the 60's and 70's. If you are too, you will find this quite interesting: [Software Glitch in the Apollo Lunar Mission (3 minutes)](https://spectrum.ieee.org/video/aerospace/space-flight/don-eyles-space-hacker)
* Test doubles, mocks, and similar concepts are a powerful abstraction for independently testing complex subsystems. Of course we're using minitest, but rspec is a popular alternative test framework. Bottom line they are both quite similar to each other. [Test Doubles in Theory, in Minitest and Rspec](http://ieftimov.com/test-doubles-theory-minitest-rspec).
* Good advanced testing concepts: [Test Doubles â€“ Fakes, Mocks and Stubs](http://pragmatists.pl/blog/2017/03/test-doubles-fakes-mocks-or-stubs/?__s=sp8sgb9wzgpq5zssprse)
* Video talk by the original inventor of Rails where he argues strongly (the only way he knows how to argue) against TDD. This video: [RailsConf 2014 Keynote](http://youtu.be/9LfmrkyP81M), from last year caused untold controversy.
* [Ruby Debugging Magic](http://www.schneems.com/2016/01/25/ruby-debugging-magic-cheat-sheet.html)
* [MiniTest Cookbook](https://chriskottom.com/minitestcookbook/)
* <a href="/content/topics/documents/cheatsheets.pdf">Minitest Cheat Sheet</a>

## Rest and Web Services
* [What Restful actually means](https://codewords.recurse.com/issues/five/what-restful-actually-means?__s=sp8sgb9wzgpq5zssprse)
* [Choosing a front end framework](https://medium.com/this-dot-labs/building-modern-web-applications-in-2017-791d2ef2e341)
* [Respond_to without all the PAIN!](https://www.justinweiss.com/articles/respond-to-without-all-the-pain/)
* Lets look at another <%= link_to_topic :classes_objects_polymorphism %>

## APIs, REST, and PUSH
* [Build a JSON API with Rails 5 ](https://scotch.io/tutorials/build-a-restful-json-api-with-rails-5-part-one)
* [Websockets - A conceptual deep dive](https://www.ably.io/concepts/websockets)
* [ActionCable, the missing guide](https://blog.codeship.com/actioncable-the-missing-guide/)
* [Real Time Rails, WebSockets](https://blog.heroku.com/real_time_rails_implementing_websockets_in_rails_5_with_action_cable)

## Mobile Apps
* [Ruby Motion for cross platform iOS and Android Applications](http://www.rubymotion.com)
* [Response time in man-computer conversational transactions](http://theixdlibrary.com/pdf/Miller1968.pdf) (Old paper but still useful.)
* [PhoneGap](https://phonegap.com). A crossplatform mobile GUI framework, based on[Apache Cordova](https://cordova.apache.org)

## Scaling in rails
* [You Are Not Google](https://blog.bradfieldcs.com/you-are-not-google-84912cf44afb)
* [Why our classes eventually reach 50 columns and hundreds of methods](http://blog.arkency.com/2017/03/why-your-classes-eventually-reach-50-columns-and-hundreds-of-methods/)
* [27 Gems I use in almost every Software As A Service Project](https://hackernoon.com/27-gems-i-use-in-almost-every-project-832986551df8?gi=147e3a4a808e)
* [100ms to Glass with Rails and Turbolinks](https://www.nateberkopec.com/2015/05/27/100-ms-to-glass-with-rails-and-turbolinks.html)
* [Feature Toggles](http://martinfowler.com/articles/feature-toggles.html)
* [Speeding Up Your Rails Applications](https://medium.com/@daniellempesis/speeding-up-your-ruby-on-rails-app-4c37ec71b126)

## Software Design

* [Google Java Style Guide](https://google.github.io/styleguide/javaguide.html)
* [Java Ranch Programming Style Guide](http://javaranch.com/style.jsp),
* A really old but good book by the co-inventor of C: [Elements of Programming Style](https://www.amazon.com/Elements-Programming-Style-2nd/dp/0070342075)
* <%= link_to_topic :classes_objects_polymorphism %>
* <%= link_to_topic :software_design %>

